Microsoft (R) Macro Assembler Version 6.14.8444		    05/06/21 22:01:01
asm_mod_realisations.asm				     Page 1 - 1


				.686
				.model flat

 00000000			    .code
				public One_dot_cross
				public Reverse_mutation
				;public Entity_sort
 00000000			    .code

				;
				;procedure One_dot_cross(var ent1, ent2 : cardinal; r_val : byte);
				;
 00000000			One_dot_cross proc

						;prologue
						
 00000000  55					push ebp
 00000001  8B EC				mov ebp, esp
 00000003  50					push eax
 00000004  53					push ebx
 00000005  52					push edx
 00000006  51					push ecx
						
 = dword ptr [ebp + 8]				ent1 equ dword ptr [ebp + 8]; ссылка на ДНК1
 = dword ptr [ebp + 12]				ent2 equ dword ptr [ebp + 12]; ссылка на ДНК2
						;M equ dword ptr [ebp + 16]; значение количества битов в ДНК(const = 16)
 = dword ptr [ebp + 16]				r_val equ dword ptr [ebp + 16]; случайное значение позиции
						
						;body
						
 00000007  8B 5D 08				mov ebx, ent1
 0000000A  8B 03				mov eax, [ebx]
 0000000C  8B 5D 0C				mov ebx, ent2
 0000000F  8B 13				mov edx, [ebx]
						
						;получение маски
 00000011  8B 4D 10				mov ecx, r_val
 00000014  BB 00008000				mov ebx,  1000000000000000b; 1000000000000000b
 00000019  66| D3 FB				sar bx, cl; 1...10...0
 0000001C  66| F7 D3				not bx; 0...01...1
				comment*	
						mov eax, ent1
						mov [eax], ebx
						mov eax, ent2
						not bx
						mov [eax], ebx
						jmp Epic*
						;получили маску
						
 0000001F  8B F2				mov esi, edx
 00000021  23 F3				and esi, ebx
 00000023  66| F7 D3				not bx
 00000026  23 C3				and eax, ebx
 00000028  0B C6				or eax, esi
						
 0000002A  8B 4D 08				mov ecx, ent1
 0000002D  8B 31				mov esi, [ecx]
 0000002F  66| F7 D3				not bx
 00000032  23 F3				and esi, ebx
 00000034  66| F7 D3				not bx
 00000037  23 D3				and edx, ebx
 00000039  0B D6				or edx, esi
						
						;теперь перемещаем результат с регистров в память
 0000003B  8B 5D 08				mov ebx, ent1
 0000003E  89 03				mov [ebx], eax
 00000040  8B 5D 0C				mov ebx, ent2
 00000043  89 13				mov [ebx], edx
						
						;epilogue
 00000045			Epic:		
 00000045  59					pop ecx
 00000046  5A					pop edx
 00000047  5B					pop ebx
 00000048  58					pop eax
 00000049  5D					pop ebp
 0000004A  C2 000C				ret 12
 0000004D			One_dot_cross endp

				;
				;procedure Reverse_mutation(var ent : cardinal; r_valm : byte)
				;
 0000004D			Reverse_mutation proc
						
						;prologue
						
 0000004D  55					push ebp
 0000004E  8B EC				mov ebp, esp
 00000050  50					push eax
 00000051  53					push ebx
 00000052  52					push edx
 00000053  51					push ecx
						
 = dword ptr [ebp + 8]				ent equ dword ptr [ebp + 8]; ссылка на ДНК
 = dword ptr [ebp + 12]				r_valm equ dword ptr [ebp + 12]
						
						;main
						
 00000054  8B 5D 08				mov ebx, ent
 00000057  8B 03				mov eax, [ebx]
						
						;получаем маску 
 00000059  8B 4D 0C				mov ecx, r_valm
 0000005C  BB 00008000				mov ebx, 8000h
 00000061  66| D3 FB				sar bx, cl
 00000064  66| F7 D3				not bx
						;получили маску
				comment*	
						mov eax, ent
						mov [eax], ebx
						jmp Epim*
						
 00000067  8B D0				mov edx, eax
 00000069  F7 D2				not edx
 0000006B  23 D3				and edx, ebx
 0000006D  F7 D3				not ebx
 0000006F  23 C3				and eax, ebx
 00000071  0B C2				or eax, edx
						
						;ответ на eax
						;помещаем в память, откуда взяли
 00000073  8B 5D 08				mov ebx, ent
 00000076  89 03				mov [ebx], eax
						
						;epilogue
 00000078			Epim:		
 00000078  59					pop ecx
 00000079  5A					pop edx
 0000007A  5B					pop ebx
 0000007B  58					pop eax
 0000007C  5D					pop ebp
 0000007D  C2 0008				ret 8
 00000080			Reverse_mutation endp


				;
				;procedure Entity_sort(var pop.func_val[0] : array of real; var pop.ent_val[0] : array of cardinal; pop_val : word)
				;
 00000080			Entity_sort proc
						;
						;Prologue
						;
 00000080  55					push ebp
 00000081  8B EC				mov ebp, esp
 00000083  50					push eax
 00000084  53					push ebx; сдвиг начала
 00000085  51					push ecx; счётчик цикла
 00000086  52					push edx
 00000087  56					push esi; количество свопов
 00000088  57					push edi; первый элемент какого-то массива
 = dword ptr [ebp + 8]				f_v equ dword ptr [ebp + 8]; ссылка на первывй элемент массива вещественных чисел
 = dword ptr [ebp + 12]				e_v equ dword ptr [ebp + 12]; ссылка на первый элемент массива ДНК
 = dword ptr [ebp + 16]				a_v equ dword ptr [ebp + 16]; ссылка на первый элемент массива arg
 = dword ptr [ebp + 20]				pop_val equ dword ptr [ebp + 20]; количество особей в популяции
						;
						;Main
						;
 00000089  8B 4D 14				mov ecx, pop_val
 0000008C  BB 00000000				mov ebx, 0
 00000091  83 E9 01				sub ecx, 1
 00000094  BE 00000000				mov esi, 0
 00000099			cycle:	
 00000099  8B 7D 08				mov edi, f_v
 0000009C  D9 44 3B 04				fld dword ptr[edi + ebx + 4]
 000000A0  D9 04 3B				fld dword ptr[edi + ebx]
 000000A3  DB F1				fcomi st, st(1)
 000000A5  76 33				jbe skip
						;свопаем значения функций
 000000A7  8B 04 3B				mov eax, [edi + ebx]
 000000AA  8B 54 3B 04				mov edx, [edi + ebx + 4]
 000000AE  89 44 3B 04				mov [edi + ebx + 4], eax
 000000B2  89 14 3B				mov [edi + ebx], edx
						;свопаем ДНК
 000000B5  8B 7D 0C				mov edi, e_v
 000000B8  8B 04 3B				mov eax, [edi + ebx]
 000000BB  8B 54 3B 04				mov edx, [edi + ebx + 4]
 000000BF  89 44 3B 04				mov [edi + ebx + 4], eax
 000000C3  89 14 3B				mov [edi + ebx], edx
						;свопаем Аргументы
 000000C6  8B 7D 10				mov edi, a_v
 000000C9  8B 04 3B				mov eax, [edi + ebx]
 000000CC  8B 54 3B 04				mov edx, [edi + ebx + 4]
 000000D0  89 44 3B 04				mov [edi + ebx + 4], eax
 000000D4  89 14 3B				mov [edi + ebx], edx	
						;только что был своп
 000000D7  83 C6 01				add esi, 1
 000000DA			skip:	
 000000DA  DD C1				ffree st(1)
 000000DC  DD C0				ffree st(0)
 000000DE  83 C3 04				add ebx, 4
 000000E1  83 E9 01				sub ecx, 1
 000000E4  83 F9 00				cmp ecx, 0
 000000E7  77 B0				ja cycle
 000000E9  83 FE 00				cmp esi, 0
 000000EC  74 12				je Epis
 000000EE  BB 00000000				mov ebx, 0
 000000F3  8B 4D 14				mov ecx, pop_val
 000000F6  83 E9 01				sub ecx, 1
 000000F9  BE 00000000				mov esi, 0
 000000FE  EB 99				jmp cycle
 00000100			Epis:
						;
						;Epilogue
						;
 00000100  5F					pop edi
 00000101  5E					pop esi
 00000102  5A					pop edx
 00000103  59					pop ecx
 00000104  5B					pop ebx
 00000105  58					pop eax
 00000106  5D					pop ebp
 00000107  C2 0010				ret 16
 0000010A			Entity_sort endp
					end
Microsoft (R) Macro Assembler Version 6.14.8444		    05/06/21 22:01:01
asm_mod_realisations.asm				     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
_DATA  . . . . . . . . . . . . .	32 Bit	 00000000 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000010A Para	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

Entity_sort  . . . . . . . . . .	P Near	 00000080 _TEXT	Length= 0000008A Public
  cycle  . . . . . . . . . . . .	L Near	 00000099 _TEXT	
  skip . . . . . . . . . . . . .	L Near	 000000DA _TEXT	
  Epis . . . . . . . . . . . . .	L Near	 00000100 _TEXT	
One_dot_cross  . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000004D Public
  Epic . . . . . . . . . . . . .	L Near	 00000045 _TEXT	
Reverse_mutation . . . . . . . .	P Near	 0000004D _TEXT	Length= 00000033 Public
  Epim . . . . . . . . . . . . .	L Near	 00000078 _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000000h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
a_v  . . . . . . . . . . . . . .	Text   	 dword ptr [ebp + 16]
e_v  . . . . . . . . . . . . . .	Text   	 dword ptr [ebp + 12]
ent1 . . . . . . . . . . . . . .	Text   	 dword ptr [ebp + 8]
ent2 . . . . . . . . . . . . . .	Text   	 dword ptr [ebp + 12]
ent  . . . . . . . . . . . . . .	Text   	 dword ptr [ebp + 8]
f_v  . . . . . . . . . . . . . .	Text   	 dword ptr [ebp + 8]
pop_val  . . . . . . . . . . . .	Text   	 dword ptr [ebp + 20]
r_valm . . . . . . . . . . . . .	Text   	 dword ptr [ebp + 12]
r_val  . . . . . . . . . . . . .	Text   	 dword ptr [ebp + 16]

	   0 Warnings
	   0 Errors
